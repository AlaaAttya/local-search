<?php

namespace Dalilak\VenueBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * VenueRepository
 * 
 * @author Alaa Attya <alaa.attya91@gmail.com> 
 * @package Dalilak.VenueBundle.Repository
 * @version 1.0
 * @license  http://www.opensource.org/licenses/mit-license.php The MIT License
 * @category Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VenueRepository extends EntityRepository {

    /**
     * Get Venues by category alias
     * 
     * @param string $category_alias
     * @param integer $limit
     */
    public function getByCategoryAlias($category_alias, $limit = 5, $last_id = null) {
        $q = $this->createQueryBuilder('venue');
        if (!empty($last_id) && $last_id != null) {
            return $q->innerJoin("venue.categories", "c")
                            ->where(
                                    $q->expr()->like('c.alias', ':category_alias')
                            )
                            ->andWhere("venue.id >= :venue_id")
                            ->setMaxResults($limit)
                            ->setParameter('category_alias', "%$category_alias%")
                            ->setParameter('venue_id', $last_id)
                            ->getQuery()
                            ->getResult();
        } else {
            return $q->innerJoin("venue.categories", "c")
                            ->where(
                                    $q->expr()->like('c.alias', ':category_alias')
                            )
                            ->setMaxResults($limit)
                            ->setParameter('category_alias', "%$category_alias%")
                            ->getQuery()
                            ->getResult();
        }
    }

    /**
     * Get Venues by category id
     * 
     * @param string $category_id
     * @param integer $limit
     */
    public function getByCategoryId($category_id, $limit = 5, $last_id = null) {
        $q = $this->createQueryBuilder('venue');
        if (!empty($last_id) && $last_id != null) {
            return $q->innerJoin("venue.categories", "c")
                            ->where(
                                    'c.id = :category_id'
                            )
                            ->andWhere("venue.id >= :venue_id")
                            ->setMaxResults($limit)
                            ->setParameter('category_id', $category_id)
                            ->setParameter('venue_id', $last_id)
                            ->getQuery()
                            ->getResult();
        } else {
            return $q->innerJoin("venue.categories", "c")
                            ->where(
                                    'c.id = :category_id'
                            )
                            ->setMaxResults($limit)
                            ->setParameter('category_id', $category_id)
                            ->getQuery()
                            ->getResult();
        }
    }


    /**
     * Get venues bu name
     * 
     * @param string $name
     * @param integer $limit
     */
    public function findByName($name, $limit = 5, $last_id = null) {
        $q = $this->createQueryBuilder('venue');
        if (!empty($last_id) && $last_id != null) {
            return $q->where(
                                    $q->expr()->like('venue.name', ':venue_name')
                            )
                            ->andWhere('venue.id >= :venue_id')
                            ->setMaxResults($limit)
                            ->setParameter('venue_name', "%$name%")
                            ->setParameter('venue_id', "$last_id")
                            ->getQuery()
                            ->getResult();
        } else {
            return $q->where(
                                    $q->expr()->like('venue.name', ':venue_name')
                            )
                            ->setMaxResults($limit)
                            ->setParameter('venue_name', "%$name%")
                            ->getQuery()
                            ->getResult();
        }
    }

}
